### UNTESTED CODE ###
### records video with USB camera and PI camera simultaneously
# tries to not use xbees, just record

import cv2
from picamzero import Camera
import serial

class USB_camera_control:
    def __init__(self):
        self.cap = cv2.VideoCapture(1, cv2.CAP_V4L2)
        self.cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
        self.cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)
        self.fourcc = cv2.VideoWriter_fourcc(*'XVID')
        self.out = cv2.VideoWriter('output2.avi', self.fourcc, 20.0, (640, 480))

    def record_frame(self):
        _, frame = self.cap.read()

        self.out.write(frame)

        # # Display the frame
        # cv2.imshow('Recording', frame)

    def stop(self):
        self.cap.release()
        self.out.release()
        cv2.destroyAllWindows()

class PI_camera_control:
    def __init__(self):
        self.cam = Camera()

    def record(self):
        self.cam.record_video(f"./main_test", duration=5)

    def preview(self):
        self.cam.start_preview()


def main():
    usb = USB_camera_control()
    pi = PI_camera_control()
    recording = True
    piStarted = False

    # ser = serial.Serial(
    #     port='/dev/ttyS0',
    #     baudrate = 9600,
    #     parity=serial.PARITY_NONE,
    #     stopbits=serial.STOPBITS_ONE,
    #     bytesize=serial.EIGHTBITS,
    #     timeout=1
    #)

    pi.preview()

    # while True:
    #     x = ser.readline()
    #     if x != b'':
    #         if (b"start" in x) and (not recording):
    #             recording = True

    #         elif (b"stop" in x) and (recording):
    #             recording = False
    #             usb.stop()
    #             piStarted = False


    #     if recording:
    #         usb.record_frame()
    #         if not piStarted:
    #             pi.record()
    #             piStarted = True

main()